@page "/"
@using kajiApp_blazor.Components.Models;
@using kajiApp_blazor.Components.Data
@* @rendermode InteractiveServer *@
@rendermode @(new InteractiveServerRenderMode(prerender:false))

@* DataServiceのインスタンスが生成される。コンストラクタが走る *@
@* IDすることでDataServiceはnewしなくてもインスタンスが使えるようになる *@
@inject DataService DataService

<div class="container mt-4 bg-black min-vh-100 py-4">
    <div class="bg-black text-light text-center py-3">
        <h3 class="mb-0 border-bottom border-secondary pb-2">Work List</h3>
    </div>
    <div class="card bg-dark text-white shadow-lg rounded">
        <div class="card-body">
            @if (works == null)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border text-light" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table table-dark table-striped table-hover text-center">
                        <thead class="table-light text-dark">
                            <tr>
                                <th>ID</th>
                                <th>Day</th>
                                <th>Name</th>
                                <th>Work</th>
                                <th>Percent</th>
                            </tr>
                        </thead>
                        <tbody>
                            @* Task<List<Work>>(インスタンス"works"") の中から1明細1データずつテーブルに代入*@
                            @foreach (var work in works)
                            {
                                <tr>
                                    <td>@work.Id</td>
                                    <td>@work.Day.ToShortDateString()</td>
                                    <td>@work.Name</td>
                                    <td>@work.WorkName</td>
                                    <td>@work.Percent %</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Work>? works=null;

    protected override async Task OnInitializedAsync()
    {

        //DataService.GetWorksが完了するまでプログラムは進まない
        //非同期なのでUIは変更する。
        // await Task.Delay(2000);
        // works = await Task.Run(() => DataService.GetWorks());
        works = await DataService.GetWorks();

    }
}