@page "/"
@using kajiApp_blazor.Components.Component.HomeComponent
@using kajiApp_blazor.Components.Models.HomeModel
@using kajiApp_blazor.Components.DatabaseContext.HomeDBC
@using kajiApp_blazor.Components.DatabaseContext.HomeDBC
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@using kajiApp_blazor.Components
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IConfiguration Configuration





<div class="container-fluid m-0 p-0 bg-black min-vh-100 text-white">
    <div class="text-center py-3 border-bottom border-secondary">
        <h3 class="mb-0 pb-2">実績入力フォーム</h3>
    </div>

    <div class="px-3">
        <WorkForm TodayWorkRegistration="todayworkregistration" />
    </div>

    <div class="text-center py-3 mt-4 border-bottom border-secondary">
        <h3 class="mb-0 pb-2">実績一覧</h3>
    </div>

    <div class="px-3">
        <WorkList Works="works" />
    </div>

    <div class="text-center py-3 mt-4 border-bottom border-secondary">
        <h3 class="mb-0 pb-2">ポイント割合</h3>
    </div>

    <div class="px-3">
        <PointSummaryList PointSumList="pointSumList" />
    </div>
</div>

@code {
    private List<Models.HomeModel.WorkList>? works = null;
    private List<Models.HomeModel.PointSummary>? pointSumList = null;
    //インスタンス生成で入力フォームに使うNameListとWorkList作成
    private TodayWorkRegistration todayworkregistration = new TodayWorkRegistration();

    //非同期で実績リスト取得
    protected override async Task OnInitializedAsync()
    {
        //家事実績リストをDBから持ってくる。入力フォームさえできてればOKなので非同期で取得する
        _ = LoadWorksAsync();
        _ = PointSummaryAsync();
        
    }
    private async Task LoadWorksAsync()
    {
        var workListShow = new WorkListShow();
        works = await workListShow.GetWorksAsync();
        if (works != null)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PointSummaryAsync()
    {
        var pointSummaryShow = new PointSummaryShow();
        pointSumList = await pointSummaryShow.GetPointSumListAsync();
        if  (pointSumList != null)
        {
            await InvokeAsync(StateHasChanged);
        }
    }


}
