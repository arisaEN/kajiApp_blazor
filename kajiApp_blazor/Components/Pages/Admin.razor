@page "/admin"
@using kajiApp_blazor.Components
@using kajiApp_blazor.Components.Models.AdminModel
@using kajiApp_blazor.Components.DatabaseContext.AdminDBC
@using kajiApp_blazor.Components.Component.AdminComponent
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject NavigationManager Navigation

<h3 class="fas fa-user-shield text-center mb-4 mt-4">管理者画面</h3>

@if (paymentDetail is null || paymentApprovalRecord is null)
{
    <p>データを取得中...</p>
}
else
{
    <div class="container mt-4">
        <PaymentApprovalRecordComponent PaymentApprovalRecords="paymentApprovalRecord" OnUpdate="UpdateRecord" />
        <PaymentDetailComponent PaymentDetails="paymentDetail" />

        <div class="text-center my-4">
            <a class="btn btn-secondary" href="/">家事実績入力一覧へ戻る</a>
        </div>
    </div>
}

@code {
    private List<PaymentApprovalRecord> paymentApprovalRecord = new();
    private List<PaymentDetail> paymentDetail = new();

    protected override async Task OnInitializedAsync()
    {
        _ = LoadPaymentApprovalRecordAsync();
        _ = LoadPaymentDetailAsync();
    }

    private async Task LoadPaymentApprovalRecordAsync()
    {
        var paymentApprovalRecordOperation = new PaymentApprovalRecordOperation();
        paymentApprovalRecord = await paymentApprovalRecordOperation.GetPaymentApprovalRecordAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadPaymentDetailAsync()
    {
        var paymentDetailOperation = new PaymentDetailOperation();
        paymentDetail = await paymentDetailOperation.GetPaymentDetailAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateRecord(PaymentApprovalRecord updatedRecord)
    {
        var operation = new PaymentApprovalRecordOperation();
        await operation.EditPaymentAsync(updatedRecord.YearMonth, updatedRecord.Payment, updatedRecord.Status);
        await LoadPaymentApprovalRecordAsync(); // 更新後リストを再取得
    }
}