@page "/admin"
@using Microsoft.JSInterop
@using kajiApp_blazor.Components
@using kajiApp_blazor.Components.DataModels.AdminModel
@using kajiApp_blazor.Components.ViewModel.AdminDBC
@using kajiApp_blazor.Components.Component.AdminComponent
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject Blazored.Toast.Services.IToastService ToastService

<BlazoredToasts Position="ToastPosition.BottomRight" Timeout="5" />
<h3 class="fas fa-user-shield text-center py-1">管理者画面</h3>
@if (!isAuthenticated)
{
    <div class="container mt-4 text-center">
        <p>パスワードを入力してください。</p>
        <input type="password" @bind="inputPassword" class="form-control w-25 mx-auto" placeholder="パスワード">
        <button class="btn btn-primary mt-2" @onclick="Authenticate">ログイン</button>

        @if (isWrongPassword)
        {
            <p class="text-danger mt-2">パスワードが違います</p>
        }
    </div>
}
else if (paymentDetail is null || paymentApprovalRecord is null)
{
    <p>データを取得中...</p>
}
else
{
    <div class="container mt-4">
        <PaymentApprovalRecordComponent PaymentApprovalRecords="paymentApprovalRecord" OnUpdate="UpdateRecord" />
        <PaymentDetailComponent PaymentDetails="paymentDetail" />

        <div class="text-center my-4">
            <a class="btn btn-secondary" href="/">家事実績入力一覧へ戻る</a>
        </div>
    </div>
}

@code {
    private string inputPassword = string.Empty;
    private bool isAuthenticated = false;
    private bool isWrongPassword = false;
    private List<PaymentApprovalRecord> paymentApprovalRecord = new();
    private List<PaymentDetail> paymentDetail = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await JS.InvokeAsync<string>("localStorage.getItem", "isAuthenticated");
        isAuthenticated = authState == "true";

        if (isAuthenticated)
        {
            _ = LoadPaymentApprovalRecordAsync();
            _ = LoadPaymentDetailAsync();
        }
    }

    private async Task Authenticate()
    {
        if (inputPassword == "admin")
        {
            ToastService.ShowSuccess("ログイン成功");
            isAuthenticated = true;
            isWrongPassword = false;
            await JS.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");

            _ = LoadPaymentApprovalRecordAsync();
            _ = LoadPaymentDetailAsync();
        }
        else
        {
            ToastService.ShowError($"ログイン失敗");
            isWrongPassword = true;
        }
    }

    private async Task LoadPaymentApprovalRecordAsync()
    {
        var paymentApprovalRecordOperation = new PaymentApprovalRecordOperation();
        paymentApprovalRecord = await paymentApprovalRecordOperation.GetPaymentApprovalRecordAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task LoadPaymentDetailAsync()
    {
        var paymentDetailOperation = new PaymentDetailOperation();
        paymentDetail = await paymentDetailOperation.GetPaymentDetailAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task UpdateRecord(PaymentApprovalRecord updatedRecord)
    {
        var operation = new PaymentApprovalRecordOperation();
        bool isSuccess = await operation.EditPaymentAsync(updatedRecord.YearMonth, updatedRecord.Payment, updatedRecord.Status);

        if (isSuccess)
        {
            ToastService.ShowSuccess("更新が完了しました");
            await LoadPaymentApprovalRecordAsync(); // 更新後リストを再取得
        }
        else
        {
            ToastService.ShowError("更新に失敗しました。もう一度試してください。");
        }
    }
}
