@using kajiApp_blazor.Components.Models.HomeModel

<div class="card bg-dark text-white shadow-lg rounded">
    <div class="card-body">
        @if (isLoading)
        {
            <!-- ぐるぐるマークを表示 -->
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-light" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (Works == null || !Works.Any())
        {
            <p class="text-center">2日間の記録がありません</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-dark table-striped table-hover text-center">
                    <thead class="table-light text-dark">
                        <tr>
                            <th>ID</th>
                            <th>Day</th>
                            <th>Name</th>
                            <th>Work</th>
                            <th>Percent</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var work in Works)
                        {
                            <tr>
                                <td>@work.Id</td>
                                <td>@work.Day.ToShortDateString()</td>
                                <td>@work.Name</td>
                                <td>@work.WorkName</td>
                                <td>@work.Percent %</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    //リストWorksに反応があるとUIに更新がかかる。
    [Parameter] public List<Models.HomeModel.WorkList>? Works { get; set; }

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private AppState AppState { get; set; } = default!;

    private bool isLoading = false;

    protected override void OnInitialized()
    {
        // 非同期バックグラウンドでリスト取得を実行　
        AppState.OnChange += async () => await ReloadData();
        _ = ReloadData(); // 初回データ読み込み
    }

    private async Task ReloadData()
    {
        try
        {
            isLoading = true; // ローディング開始
            await InvokeAsync(StateHasChanged); // UI更新
            var workListShow = new WorkListShow();
            Works = await workListShow.GetWorksAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"データ取得エラー: {ex.Message}");
        }
        finally
        {
            isLoading = false; // ローディング終了
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        // イベント解除
        AppState.OnChange -= async () => await ReloadData();
    }

}