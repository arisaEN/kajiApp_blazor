@using kajiApp_blazor.Components.Models.EatModel
@using kajiApp_blazor.Components.DatabaseContext.EatDBC
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@implements IDisposable

@* //明細入力画面 *@
@if (isInputVisible)
{
    <div class="input-group mt-3">
        <span class="input-group-text">@selectedYear / @selectedMonth</span>
        <input type="number" class="form-control" @bind="newAmount" placeholder="金額を入力" />
        <button class="btn btn-primary" @onclick="SaveNewRecord">保存</button>
    </div>
}
else
{
    <div class="input-placeholder text-center text-muted fade-in">
        <p>「入力」ボタンを押してデータを追加してください</p>
        <div class="placeholder-box"></div>
    </div>
}

@* //一覧 *@

@if (isLoading)
{
    <!-- ぐるぐるマークを表示 -->
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-light" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (eatrecord == null || !eatrecord.Any())
{
    <p class="text-center text-white">記録がありません</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered table-striped w-100 eat-table text-white bg-dark">
            <thead class="table-dark text-center">
                <tr>
                    <th class="text-white">年</th>
                    <th class="text-white">月</th>
                    <th class="text-white">金額</th>
                    <th class="text-white">操作</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in eatrecord)
                {
                    <tr class="text-center text-white">
                        <td>@e.year</td>
                        <td>@e.month</td>
                        <td>@e.amount</td>
                        <td>
                            <button class="btn btn-success" @onclick="() => ShowInputForm(e.year, e.month)">入力</button>
                            <button class="btn btn-warning" @onclick="() => ShowEditForm(e.year, e.month)">編集</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@if (isEditVisible && editRecords != null)
{
    <div class="mt-3">
        <h5>編集: @selectedYear / @selectedMonth</h5>
        <table class="table table-bordered text-white">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>金額</th>
                    <th>操作</th>
                    <th>登録日時</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var record in editRecords)
                {
                    <tr>
                        <td>@record.id</td>
                        <td><input type="number" class="form-control" @bind="record.amount" /></td>
                        <td><button class="btn btn-primary" @onclick="() => UpdateRecord(record)">更新</button></td>
                        <td>@record.yyyymm</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {

    [Parameter] public List<Models.EatModel.EatRecord>? eatrecord { get; set; }
    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private AppState AppState { get; set; } = default!;

    private bool isLoading = false;
    private bool isInputVisible = false;
    private bool isEditVisible = false;
    private int selectedYear;
    private int selectedMonth;
    private int newAmount;
    private List<EatDetailRecord>? editRecords;

    /// <summary>
    /// 初期化でリストデータ呼び出し
    /// </summary>
    private void OnChangeHandler() => _ = ReloadData();

    protected override void OnInitialized()
    {
        AppState.OnChange += OnChangeHandler;
        _ = ReloadData(); // 初回データ読み込み
    }

    private async Task ReloadData()
    {
        try
        {
            isLoading = true; // ローディング開始
            await InvokeAsync(StateHasChanged); // UI更新
            var eatRecordShow = new EatRecordShow();
            eatrecord  = await eatRecordShow.GetEatAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"データ取得エラー: {ex.Message}");
        }
        finally
        {
            isLoading = false; // ローディング終了
            await InvokeAsync(StateHasChanged);
        }
    }
    public void Dispose()
    {
        AppState.OnChange -= OnChangeHandler;
    }



    /// <summary>
    /// 明細を入力するとき、その明細のキーを取得する
    /// </summary>
    /// <param name="year"></param>
    /// <param name="month"></param>
    /// <returns></returns>
    private async Task ShowInputForm(int year, int month)
    {
        selectedYear = year;
        selectedMonth = month;
        isInputVisible = true;
        isEditVisible = false;
    }
    /// <summary>
    /// 明細を編集するとき、その明細のキーを取得する
    /// </summary>
    /// <param name="year"></param>
    /// <param name="month"></param>
    /// <returns></returns>
    private async Task ShowEditForm(int year, int month)
    {
        selectedYear = year;
        selectedMonth = month;
        isEditVisible = true;
        isInputVisible = false;
        var eatDetailEdit = new EatDetailEdit();
        editRecords = await eatDetailEdit.GetEatDetailAsync(selectedYear, selectedMonth);
    }

    /// <summary>
    /// 明細保存ボタンを押したときの処理（新規登録）
    /// </summary>
    /// <returns></returns>
    private async Task SaveNewRecord()
    {
        try
        {
            isLoading = true; // ローディング開始
            await InvokeAsync(StateHasChanged); // UI更新

            var eatDetailEdit = new EatDetailEdit();
            // 登録
            await eatDetailEdit.InsertEatDetailAsync(selectedYear, selectedMonth, newAmount);

            // 明細を eat テーブルに反映更新
            await eatDetailEdit.EatDetailSumAsync();

            // 最新の食費記録を取得
            await ReloadData(); // ここでリストを更新

            // 状態変更を通知
            AppState.NotifyStateChanged();

            isInputVisible = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"データ登録中にエラーが発生しました: {ex.Message}");
        }
        finally
        {
            isLoading = false; // ローディング終了
            await InvokeAsync(StateHasChanged); // UI更新
        }
    }


    /// <summary>
    /// eat明細更新
    /// </summary>
    /// <param name="record"></param>
    /// <returns></returns>
    private async Task UpdateRecord(EatDetailRecord record)
    {
        try
        {
            var eatDetailEdit = new EatDetailEdit();
            await eatDetailEdit.UpdateEatDetailAsync(record.id, record.amount); // idを使用して更新
            //更新後eatテーブル更新
            await eatDetailEdit.EatDetailSumAsync();
            // 更新後にリストを再取得
            await ReloadData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"データ更新中にエラーが発生しました: {ex.Message}");
        }
    }
}
