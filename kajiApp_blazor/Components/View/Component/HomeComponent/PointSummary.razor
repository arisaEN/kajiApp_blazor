@inject IJSRuntime JS
@using kajiApp_blazor.Components.DTO.HomeModel
@using kajiApp_blazor.Components.ViewModel.HomeDBC
@using kajiApp_blazor.Components.ViewModel
@implements IDisposable
@using kajiApp_blazor.Domain.Entity;
@inject kajiappDBContext DbContext

<div class="card bg-dark text-white shadow-lg rounded-3 m-0">
    <div class="card-body p-4">
        <h2 class="mt-3">人ごとの合計ポイント</h2>
        <h3 class="text-muted">@MonthName</h3>

        @if (isLoading)
        {
            <!-- ぐるぐるマークを表示 -->
            <div class="d-flex justify-content-center">
                <div class="spinner-border text-light" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (pointsummary.Any())
        {
            <div class="table-responsive">
                <table class="table table-dark table-hover rounded">
                    <thead class="table-secondary text-dark">
                        <tr>
                            <th>名前</th>
                            <th>合計ポイント</th>
                            <th>割合</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in pointsummary)
                        {
                            <tr>
                                <td>@p.Name</td>
                                <td>@p.TotalPoints</td>
                                <td>@p.Percentage%</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-muted text-center mt-3">データがありません。</p>
        }

        <div class="my-4">
            <canvas id="lineChart" class="w-100"></canvas>
            <canvas id="monthlyLineChart" class="mt-4 w-100"></canvas>
        </div>
    </div>
</div>
@code {
   
    [Parameter] public List<DTO.HomeModel.PointSummary>? pointsummary { get; set; }

    [Parameter]
    public DateTime CurrentDateTime { get; set; } = DateTime.Now;

    private string MonthName => CurrentDateTime.ToString("MMMM", new System.Globalization.CultureInfo("ja-JP"));

    [Inject] private HttpClient Http { get; set; } = default!;
    [Inject] private AppState AppState { get; set; } = default!;

    private bool isLoading = false;

    private void OnChangeHandler() => _ = ReloadData();

    protected override void OnInitialized()
    {
        AppState.OnChange += OnChangeHandler;
        _ = ReloadData(); // 初回データ読み込み
    }

    private async Task ReloadData()
    {
        try
        {
            isLoading = true; // ローディング開始
            await InvokeAsync(StateHasChanged); // UI更新
            //DBCからインスタンス取得、
            var pointSummaryShow = new PointSummaryShow();
            pointsummary = await pointSummaryShow.GetPointSumListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"データ取得エラー: {ex.Message}");
        }
        finally
        {
            isLoading = false; // ローディング終了
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        AppState.OnChange -= OnChangeHandler;
    }

}


